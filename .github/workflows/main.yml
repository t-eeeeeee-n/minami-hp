name: ECR Push Image with Commit Message

on:
  push:
    branches:
      - 'main'
#    tags:
#      - v*  # 'v' で始まるタグに反応（例: v1.0.0）

jobs:
  extract-commit-message:
    # GITHUB_ACTION_EXEC default false
    if: true
    runs-on: ubuntu-latest
    outputs:
      repository-name: ${{ steps.extract-repo-name.outputs.repository-name }}
    steps:
      - uses: actions/checkout@v3
      - id: extract-repo-name
        run: |
          repository_name=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)
          echo "repository-name=${repository_name}" >> $GITHUB_OUTPUT

  push:
    if: ${{ needs.extract-commit-message.outputs.repository-name != ''}}
    runs-on: ubuntu-latest
    needs: extract-commit-message
    outputs:
      repository-name: ${{ steps.build-push.outputs.repository-name }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3

      # AWS 認証
      - uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: GitHubActions

      # ECR リポジトリの存在確認と作成
      - name: Check and Create ECR Repository
        id: create-ecr
        run: |
          REPOSITORY_NAME=${{ needs.extract-commit-message.outputs.repository-name }}
          
          # ECRリポジトリの存在確認
          if aws ecr describe-repositories --repository-names ${REPOSITORY_NAME}; then
            echo "ECR repository ${REPOSITORY_NAME} already exists."
          else
            echo "ECR repository ${REPOSITORY_NAME} does not exist. Creating..."
            aws ecr create-repository --repository-name ${REPOSITORY_NAME}
            if [ $? -ne 0 ]; then
              echo "Failed to create ECR repository ${REPOSITORY_NAME}"
              exit 1
            fi
          fi      

      # ECR リポジトリポリシーの設定
      - name: Set ECR Repository Policy
        run: |
          REPOSITORY_NAME=${{ needs.extract-commit-message.outputs.repository-name }}
          
          # AWSアカウントIDを取得
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          
          # アカウントIDを動的に挿入して、一時的なポリシーファイルを作成
          sed "s/{{AWS_ACCOUNT_ID}}/${AWS_ACCOUNT_ID}/g" cloudformation/ecr_policy.json > ecr_policy_temp.json
          
          # ECRリポジトリにポリシーを設定
          aws ecr set-repository-policy --repository-name ${REPOSITORY_NAME} --policy-text file://ecr_policy_temp.json

      # ECR ログイン
      - uses: aws-actions/amazon-ecr-login@v1

      # Docker イメージを build・push する
      - name: Build and push Docker image
        id: build-push
        run: |
          REPOSITORY_NAME=${{ needs.extract-commit-message.outputs.repository-name }}
          IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${REPOSITORY_NAME}:${{ github.sha }}"
          docker build -t ${IMAGE_URI} . -f ./docker/Dockerfile
          docker push ${IMAGE_URI}
          
          echo "repository-name=${REPOSITORY_NAME}" >> $GITHUB_OUTPUT

  deploy:
    if: ${{ needs.push.outputs.repository-name != ''}}
    runs-on: ubuntu-latest
    needs: push
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3

      # AWS 認証
      - uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: GitHubActions
      # ROLLBACK_COMPLETE 状態のスタックを削除
      - name: Delete existing CloudFormation stack if in ROLLBACK_COMPLETE state
        run: |
          REPOSITORY_NAME=${{ needs.push.outputs.repository-name }}
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name ${REPOSITORY_NAME} --query "Stacks[0].StackStatus" --output text || echo "NONE")
          if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ]; then
            echo "Deleting stack in ROLLBACK_COMPLETE state..."
            aws cloudformation delete-stack --stack-name ${REPOSITORY_NAME}
            aws cloudformation wait stack-delete-complete --stack-name ${REPOSITORY_NAME}
          fi

      - name: Deploy to CloudFormation
        run: |
          REPOSITORY_NAME=${{ needs.push.outputs.repository-name }}
          IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${REPOSITORY_NAME}:${{ github.sha }}"
          aws cloudformation deploy \
            --template-file cloudformation/cloudformation-template.yaml \
            --stack-name ${REPOSITORY_NAME} \
            --parameter-overrides ImageUri=${IMAGE_URI} FunctionName=${REPOSITORY_NAME} \
            --capabilities CAPABILITY_IAM
